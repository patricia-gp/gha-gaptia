name: Spring Instance AWS

on:
  workflow_call:
    inputs:
      AWS_REGION:
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  spring:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo ${{ github.repository }} Brach ${{ github.ref }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download spring-target
        uses: actions/download-artifact@v4
        with:
          name: spring-target
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: App Version
        id: app-version
        run: |
          echo "APP=$(grep -e 'artifactId=' ./target/maven-archiver/pom.properties | awk -F '=' '{print $2}')" >> $GITHUB_OUTPUT
          echo "VERSION=$(grep -e 'version=' ./target/maven-archiver/pom.properties | awk -F '=' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Build Docker & Push to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "ecr-${{ steps.app-version.outputs.APP }}"
          IMAGE_TAG: ${{ steps.app-version.outputs.VERSION }}
        run: |          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name "deploy-${{ steps.app-version.outputs.APP }}" \
            --deployment-group-name "group-deploy-${{ steps.app-version.outputs.APP }}" \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
